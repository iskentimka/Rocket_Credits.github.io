{"ast":null,"code":"var _jsxFileName = \"/Users/edzhisk/Desktop/Rocket Credits/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// List of known bad users (in a real app, this would come from a database)\nconst BAD_USERS = ['baduser@example.com', 'scammer@example.com', 'fraud@example.com'];\n\n// Auth Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Stores logged-in user\n  const [badUsers, setBadUsers] = useState(BAD_USERS); // List of bad users\n  const navigate = useNavigate();\n  // Check for existing session on component mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n\n    // Load bad users list from localStorage or use default\n    const storedBadUsers = localStorage.getItem('badUsers');\n    if (storedBadUsers) {\n      setBadUsers(JSON.parse(storedBadUsers));\n    } else {\n      localStorage.setItem('badUsers', JSON.stringify(BAD_USERS));\n    }\n  }, []);\n\n  // Signup Function\n  const signup = (email, password) => {\n    try {\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n      // Check if user already exists\n      if (users.some(user => user.email === email)) {\n        return {\n          success: false,\n          message: \"User already exists.\"\n        };\n      }\n\n      // Create new user with initial data\n      const newUser = {\n        email,\n        password: btoa(password),\n        // Basic encoding (in production, use proper hashing)\n        createdAt: new Date().toISOString(),\n        subscription: null,\n        paymentHistory: [],\n        status: 'good',\n        // Default status is good\n        riskScore: 0,\n        // Risk score starts at 0\n        profile: {\n          name: '',\n          phone: '',\n          address: ''\n        }\n      };\n\n      // Add new user to users array\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Set current user\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = newUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        message: \"An error occurred during signup.\"\n      };\n    }\n  };\n\n  // Login Function\n  const login = (email, password) => {\n    try {\n      // Get users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n      // Find user\n      const userData = users.find(user => user.email === email);\n      if (!userData) return {\n        success: false,\n        message: \"User not found.\"\n      };\n\n      // Check password (in production, use proper password comparison)\n      if (userData.password !== btoa(password)) return {\n        success: false,\n        message: \"Invalid password.\"\n      };\n\n      // Remove sensitive data before storing in state\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = userData;\n\n      // Set current user\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: \"An error occurred during login.\"\n      };\n    }\n  };\n\n  // Logout Function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('currentUser');\n    navigate(\"/login\");\n  };\n\n  // Update User Profile\n  const updateProfile = profileData => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      if (userIndex === -1) return false;\n\n      // Update user profile\n      users[userIndex].profile = {\n        ...users[userIndex].profile,\n        ...profileData\n      };\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Update current user state\n      const updatedUser = {\n        ...user,\n        profile: users[userIndex].profile\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Update Subscription\n  const updateSubscription = subscriptionData => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      if (userIndex === -1) return false;\n\n      // Update user subscription\n      users[userIndex].subscription = subscriptionData;\n\n      // Add to payment history\n      users[userIndex].paymentHistory.push({\n        date: new Date().toISOString(),\n        type: subscriptionData.type,\n        amount: subscriptionData.price,\n        status: 'completed'\n      });\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Update current user state\n      const updatedUser = {\n        ...user,\n        subscription: subscriptionData,\n        paymentHistory: users[userIndex].paymentHistory\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return true;\n    } catch (error) {\n      console.error('Subscription update error:', error);\n      return false;\n    }\n  };\n\n  // Check if user can use Rocket Credits\n  const canUseRocketCredits = email => {\n    // Get users array\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n    // Find user\n    const userData = users.find(user => user.email === email);\n    if (!userData) return {\n      allowed: false,\n      message: \"User not found.\"\n    };\n\n    // Check user status\n    if (userData.status === 'bad') {\n      return {\n        allowed: true,\n        message: \"Your account has been flagged for suspicious payment activity. Rocket Credits can reject your application.\"\n      };\n    }\n\n    // Check risk score\n    if (userData.riskScore > 70) {\n      return {\n        allowed: true,\n        message: \"Due to your account's risk assessment, Rocket Credits can reject your application.\"\n      };\n    }\n    return {\n      allowed: true\n    };\n  };\n\n  // Mark user as bad\n  const markUserAsBad = (email, reason = \"Suspicious activity\") => {\n    try {\n      // Update bad users list\n      const updatedBadUsers = [...badUsers, email.toLowerCase()];\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].status = 'bad';\n        users[userIndex].riskScore = 100;\n        users[userIndex].suspensionReason = reason;\n        users[userIndex].suspensionDate = new Date().toISOString();\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      // If the current user is being marked as bad, log them out\n      if (user && user.email.toLowerCase() === email.toLowerCase()) {\n        logout();\n      }\n      return true;\n    } catch (error) {\n      console.error('Error marking user as bad:', error);\n      return false;\n    }\n  };\n\n  // Mark user as good\n  const markUserAsGood = email => {\n    try {\n      // Remove from bad users list\n      const updatedBadUsers = badUsers.filter(e => e.toLowerCase() !== email.toLowerCase());\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].status = 'good';\n        users[userIndex].riskScore = Math.max(0, users[userIndex].riskScore - 50); // Reduce risk score\n        users[userIndex].suspensionReason = null;\n        users[userIndex].suspensionDate = null;\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n      return true;\n    } catch (error) {\n      console.error('Error marking user as good:', error);\n      return false;\n    }\n  };\n\n  // Increase user risk score\n  const increaseRiskScore = (email, points = 10) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].riskScore = Math.min(100, (users[userIndex].riskScore || 0) + points);\n\n        // If risk score exceeds threshold, mark as bad\n        if (users[userIndex].riskScore >= 80 && users[userIndex].status !== 'bad') {\n          users[userIndex].status = 'bad';\n\n          // Also add to bad users list\n          const updatedBadUsers = [...badUsers, email.toLowerCase()];\n          setBadUsers(updatedBadUsers);\n          localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n        }\n        localStorage.setItem('users', JSON.stringify(users));\n\n        // If the current user's risk score is being increased, update their state\n        if (user && user.email.toLowerCase() === email.toLowerCase()) {\n          const updatedUser = {\n            ...user,\n            riskScore: users[userIndex].riskScore,\n            status: users[userIndex].status\n          };\n          setUser(updatedUser);\n          localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n          // If user is now bad, log them out\n          if (users[userIndex].status === 'bad') {\n            logout();\n          }\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('Error increasing risk score:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      signup,\n      logout,\n      updateProfile,\n      updateSubscription,\n      canUseRocketCredits,\n      markUserAsBad,\n      markUserAsGood,\n      increaseRiskScore,\n      badUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom Hook to Use Auth Context\n_s(AuthProvider, \"JiCSG0vOCytTWcYahvTpR3X1MsI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","BAD_USERS","AuthProvider","children","_s","user","setUser","badUsers","setBadUsers","navigate","storedUser","localStorage","getItem","JSON","parse","storedBadUsers","setItem","stringify","signup","email","password","users","some","success","message","newUser","btoa","createdAt","Date","toISOString","subscription","paymentHistory","status","riskScore","profile","name","phone","address","push","_","userWithoutPassword","error","console","login","userData","find","logout","removeItem","updateProfile","profileData","userIndex","findIndex","u","updatedUser","updateSubscription","subscriptionData","date","type","amount","price","canUseRocketCredits","allowed","markUserAsBad","reason","updatedBadUsers","toLowerCase","suspensionReason","suspensionDate","markUserAsGood","filter","e","Math","max","increaseRiskScore","points","min","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/edzhisk/Desktop/Rocket Credits/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Create Auth Context\nconst AuthContext = createContext();\n\n// List of known bad users (in a real app, this would come from a database)\nconst BAD_USERS = [\n  'baduser@example.com',\n  'scammer@example.com',\n  'fraud@example.com'\n];\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Stores logged-in user\n  const [badUsers, setBadUsers] = useState(BAD_USERS); // List of bad users\n  const navigate = useNavigate();\n  // Check for existing session on component mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n\n    // Load bad users list from localStorage or use default\n    const storedBadUsers = localStorage.getItem('badUsers');\n    if (storedBadUsers) {\n      setBadUsers(JSON.parse(storedBadUsers));\n    } else {\n      localStorage.setItem('badUsers', JSON.stringify(BAD_USERS));\n    }\n  }, []);\n\n  // Signup Function\n  const signup = (email, password) => {\n    try {\n\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      \n      // Check if user already exists\n      if (users.some(user => user.email === email)) {\n        return { success: false, message: \"User already exists.\" };\n      }\n\n      // Create new user with initial data\n      const newUser = {\n        email,\n        password: btoa(password), // Basic encoding (in production, use proper hashing)\n        createdAt: new Date().toISOString(),\n        subscription: null,\n        paymentHistory: [],\n        status: 'good', // Default status is good\n        riskScore: 0, // Risk score starts at 0\n        profile: {\n          name: '',\n          phone: '',\n          address: ''\n        }\n      };\n\n      // Add new user to users array\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Set current user\n      const { password: _, ...userWithoutPassword } = newUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, message: \"An error occurred during signup.\" };\n    }\n  };\n\n  // Login Function\n  const login = (email, password) => {\n    try {\n      // Get users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      \n      // Find user\n      const userData = users.find(user => user.email === email);\n      if (!userData) return { success: false, message: \"User not found.\" };\n\n      // Check password (in production, use proper password comparison)\n      if (userData.password !== btoa(password)) return { success: false, message: \"Invalid password.\" };\n\n      // Remove sensitive data before storing in state\n      const { password: _, ...userWithoutPassword } = userData;\n      \n      // Set current user\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, message: \"An error occurred during login.\" };\n    }\n  };\n\n  // Logout Function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('currentUser');\n    navigate(\"/login\");\n  };\n\n  // Update User Profile\n  const updateProfile = (profileData) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex === -1) return false;\n\n      // Update user profile\n      users[userIndex].profile = {\n        ...users[userIndex].profile,\n        ...profileData\n      };\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Update current user state\n      const updatedUser = {\n        ...user,\n        profile: users[userIndex].profile\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      \n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Update Subscription\n  const updateSubscription = (subscriptionData) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex === -1) return false;\n\n      // Update user subscription\n      users[userIndex].subscription = subscriptionData;\n\n      // Add to payment history\n      users[userIndex].paymentHistory.push({\n        date: new Date().toISOString(),\n        type: subscriptionData.type,\n        amount: subscriptionData.price,\n        status: 'completed'\n      });\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Update current user state\n      const updatedUser = {\n        ...user,\n        subscription: subscriptionData,\n        paymentHistory: users[userIndex].paymentHistory\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      \n      return true;\n    } catch (error) {\n      console.error('Subscription update error:', error);\n      return false;\n    }\n  };\n\n  // Check if user can use Rocket Credits\n  const canUseRocketCredits = (email) => {\n\n    // Get users array\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    \n    // Find user\n    const userData = users.find(user => user.email === email);\n    if (!userData) return { allowed: false, message: \"User not found.\" };\n\n    // Check user status\n    if (userData.status === 'bad') {\n      return { allowed: true, message: \"Your account has been flagged for suspicious payment activity. Rocket Credits can reject your application.\" };\n    }\n\n    // Check risk score\n    if (userData.riskScore > 70) {\n      return { allowed: true, message: \"Due to your account's risk assessment, Rocket Credits can reject your application.\" };\n    }\n\n    return { allowed: true };\n  };\n\n  // Mark user as bad\n  const markUserAsBad = (email, reason = \"Suspicious activity\") => {\n    try {\n      // Update bad users list\n      const updatedBadUsers = [...badUsers, email.toLowerCase()];\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].status = 'bad';\n        users[userIndex].riskScore = 100;\n        users[userIndex].suspensionReason = reason;\n        users[userIndex].suspensionDate = new Date().toISOString();\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      // If the current user is being marked as bad, log them out\n      if (user && user.email.toLowerCase() === email.toLowerCase()) {\n        logout();\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error marking user as bad:', error);\n      return false;\n    }\n  };\n\n  // Mark user as good\n  const markUserAsGood = (email) => {\n    try {\n      // Remove from bad users list\n      const updatedBadUsers = badUsers.filter(e => e.toLowerCase() !== email.toLowerCase());\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].status = 'good';\n        users[userIndex].riskScore = Math.max(0, users[userIndex].riskScore - 50); // Reduce risk score\n        users[userIndex].suspensionReason = null;\n        users[userIndex].suspensionDate = null;\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error marking user as good:', error);\n      return false;\n    }\n  };\n\n  // Increase user risk score\n  const increaseRiskScore = (email, points = 10) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].riskScore = Math.min(100, (users[userIndex].riskScore || 0) + points);\n        \n        // If risk score exceeds threshold, mark as bad\n        if (users[userIndex].riskScore >= 80 && users[userIndex].status !== 'bad') {\n          users[userIndex].status = 'bad';\n          \n          // Also add to bad users list\n          const updatedBadUsers = [...badUsers, email.toLowerCase()];\n          setBadUsers(updatedBadUsers);\n          localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n        }\n        \n        localStorage.setItem('users', JSON.stringify(users));\n        \n        // If the current user's risk score is being increased, update their state\n        if (user && user.email.toLowerCase() === email.toLowerCase()) {\n          const updatedUser = {\n            ...user,\n            riskScore: users[userIndex].riskScore,\n            status: users[userIndex].status\n          };\n          setUser(updatedUser);\n          localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n          \n          // If user is now bad, log them out\n          if (users[userIndex].status === 'bad') {\n            logout();\n          }\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error increasing risk score:', error);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      login, \n      signup, \n      logout,\n      updateProfile,\n      updateSubscription,\n      canUseRocketCredits,\n      markUserAsBad,\n      markUserAsGood,\n      increaseRiskScore,\n      badUsers\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom Hook to Use Auth Context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMQ,SAAS,GAAG,CAChB,qBAAqB,EACrB,qBAAqB,EACrB,mBAAmB,CACpB;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAACM,SAAS,CAAC,CAAC,CAAC;EACrD,MAAMQ,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B;EACAD,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACdJ,OAAO,CAACO,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACjC;;IAEA;IACA,MAAMK,cAAc,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAIG,cAAc,EAAE;MAClBP,WAAW,CAACK,IAAI,CAACC,KAAK,CAACC,cAAc,CAAC,CAAC;IACzC,CAAC,MAAM;MACLJ,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAAChB,SAAS,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,MAAM,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAClC,IAAI;MAEF;MACA,MAAMC,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;;MAE/D;MACA,IAAIS,KAAK,CAACC,IAAI,CAACjB,IAAI,IAAIA,IAAI,CAACc,KAAK,KAAKA,KAAK,CAAC,EAAE;QAC5C,OAAO;UAAEI,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAuB,CAAC;MAC5D;;MAEA;MACA,MAAMC,OAAO,GAAG;QACdN,KAAK;QACLC,QAAQ,EAAEM,IAAI,CAACN,QAAQ,CAAC;QAAE;QAC1BO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,YAAY,EAAE,IAAI;QAClBC,cAAc,EAAE,EAAE;QAClBC,MAAM,EAAE,MAAM;QAAE;QAChBC,SAAS,EAAE,CAAC;QAAE;QACdC,OAAO,EAAE;UACPC,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE,EAAE;UACTC,OAAO,EAAE;QACX;MACF,CAAC;;MAED;MACAhB,KAAK,CAACiB,IAAI,CAACb,OAAO,CAAC;MACnBd,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;;MAEpD;MACA,MAAM;QAAED,QAAQ,EAAEmB,CAAC;QAAE,GAAGC;MAAoB,CAAC,GAAGf,OAAO;MACvDnB,OAAO,CAACkC,mBAAmB,CAAC;MAC5B7B,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACuB,mBAAmB,CAAC,CAAC;MAExE,OAAO;QAAEjB,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO;QAAElB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAmC,CAAC;IACxE;EACF,CAAC;;EAED;EACA,MAAMmB,KAAK,GAAGA,CAACxB,KAAK,EAAEC,QAAQ,KAAK;IACjC,IAAI;MACF;MACA,MAAMC,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;;MAE/D;MACA,MAAMgC,QAAQ,GAAGvB,KAAK,CAACwB,IAAI,CAACxC,IAAI,IAAIA,IAAI,CAACc,KAAK,KAAKA,KAAK,CAAC;MACzD,IAAI,CAACyB,QAAQ,EAAE,OAAO;QAAErB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAkB,CAAC;;MAEpE;MACA,IAAIoB,QAAQ,CAACxB,QAAQ,KAAKM,IAAI,CAACN,QAAQ,CAAC,EAAE,OAAO;QAAEG,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAoB,CAAC;;MAEjG;MACA,MAAM;QAAEJ,QAAQ,EAAEmB,CAAC;QAAE,GAAGC;MAAoB,CAAC,GAAGI,QAAQ;;MAExD;MACAtC,OAAO,CAACkC,mBAAmB,CAAC;MAC5B7B,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACuB,mBAAmB,CAAC,CAAC;MAExE,OAAO;QAAEjB,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO;QAAElB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAkC,CAAC;IACvE;EACF,CAAC;;EAED;EACA,MAAMsB,MAAM,GAAGA,CAAA,KAAM;IACnBxC,OAAO,CAAC,IAAI,CAAC;IACbK,YAAY,CAACoC,UAAU,CAAC,aAAa,CAAC;IACtCtC,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMuC,aAAa,GAAIC,WAAW,IAAK;IACrC,IAAI;MACF,MAAM5B,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;MAC/D,MAAMsC,SAAS,GAAG7B,KAAK,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,KAAK,KAAKd,IAAI,CAACc,KAAK,CAAC;MAE9D,IAAI+B,SAAS,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;;MAElC;MACA7B,KAAK,CAAC6B,SAAS,CAAC,CAAChB,OAAO,GAAG;QACzB,GAAGb,KAAK,CAAC6B,SAAS,CAAC,CAAChB,OAAO;QAC3B,GAAGe;MACL,CAAC;;MAED;MACAtC,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;;MAEpD;MACA,MAAMgC,WAAW,GAAG;QAClB,GAAGhD,IAAI;QACP6B,OAAO,EAAEb,KAAK,CAAC6B,SAAS,CAAC,CAAChB;MAC5B,CAAC;MACD5B,OAAO,CAAC+C,WAAW,CAAC;MACpB1C,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACoC,WAAW,CAAC,CAAC;MAEhE,OAAO,IAAI;IACb,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMa,kBAAkB,GAAIC,gBAAgB,IAAK;IAC/C,IAAI;MACF,MAAMlC,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;MAC/D,MAAMsC,SAAS,GAAG7B,KAAK,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,KAAK,KAAKd,IAAI,CAACc,KAAK,CAAC;MAE9D,IAAI+B,SAAS,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;;MAElC;MACA7B,KAAK,CAAC6B,SAAS,CAAC,CAACpB,YAAY,GAAGyB,gBAAgB;;MAEhD;MACAlC,KAAK,CAAC6B,SAAS,CAAC,CAACnB,cAAc,CAACO,IAAI,CAAC;QACnCkB,IAAI,EAAE,IAAI5B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC9B4B,IAAI,EAAEF,gBAAgB,CAACE,IAAI;QAC3BC,MAAM,EAAEH,gBAAgB,CAACI,KAAK;QAC9B3B,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACArB,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;;MAEpD;MACA,MAAMgC,WAAW,GAAG;QAClB,GAAGhD,IAAI;QACPyB,YAAY,EAAEyB,gBAAgB;QAC9BxB,cAAc,EAAEV,KAAK,CAAC6B,SAAS,CAAC,CAACnB;MACnC,CAAC;MACDzB,OAAO,CAAC+C,WAAW,CAAC;MACpB1C,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACoC,WAAW,CAAC,CAAC;MAEhE,OAAO,IAAI;IACb,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMmB,mBAAmB,GAAIzC,KAAK,IAAK;IAErC;IACA,MAAME,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;;IAE/D;IACA,MAAMgC,QAAQ,GAAGvB,KAAK,CAACwB,IAAI,CAACxC,IAAI,IAAIA,IAAI,CAACc,KAAK,KAAKA,KAAK,CAAC;IACzD,IAAI,CAACyB,QAAQ,EAAE,OAAO;MAAEiB,OAAO,EAAE,KAAK;MAAErC,OAAO,EAAE;IAAkB,CAAC;;IAEpE;IACA,IAAIoB,QAAQ,CAACZ,MAAM,KAAK,KAAK,EAAE;MAC7B,OAAO;QAAE6B,OAAO,EAAE,IAAI;QAAErC,OAAO,EAAE;MAA6G,CAAC;IACjJ;;IAEA;IACA,IAAIoB,QAAQ,CAACX,SAAS,GAAG,EAAE,EAAE;MAC3B,OAAO;QAAE4B,OAAO,EAAE,IAAI;QAAErC,OAAO,EAAE;MAAqF,CAAC;IACzH;IAEA,OAAO;MAAEqC,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAC3C,KAAK,EAAE4C,MAAM,GAAG,qBAAqB,KAAK;IAC/D,IAAI;MACF;MACA,MAAMC,eAAe,GAAG,CAAC,GAAGzD,QAAQ,EAAEY,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;MAC1DzD,WAAW,CAACwD,eAAe,CAAC;MAC5BrD,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAAC+C,eAAe,CAAC,CAAC;;MAEjE;MACA,MAAM3C,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;MAC/D,MAAMsC,SAAS,GAAG7B,KAAK,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,KAAK,CAAC8C,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;MAErF,IAAIf,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB7B,KAAK,CAAC6B,SAAS,CAAC,CAAClB,MAAM,GAAG,KAAK;QAC/BX,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,GAAG,GAAG;QAChCZ,KAAK,CAAC6B,SAAS,CAAC,CAACgB,gBAAgB,GAAGH,MAAM;QAC1C1C,KAAK,CAAC6B,SAAS,CAAC,CAACiB,cAAc,GAAG,IAAIvC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC1DlB,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;MACtD;;MAEA;MACA,IAAIhB,IAAI,IAAIA,IAAI,CAACc,KAAK,CAAC8C,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,EAAE;QAC5DnB,MAAM,CAAC,CAAC;MACV;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAM2B,cAAc,GAAIjD,KAAK,IAAK;IAChC,IAAI;MACF;MACA,MAAM6C,eAAe,GAAGzD,QAAQ,CAAC8D,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACL,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;MACrFzD,WAAW,CAACwD,eAAe,CAAC;MAC5BrD,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAAC+C,eAAe,CAAC,CAAC;;MAEjE;MACA,MAAM3C,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;MAC/D,MAAMsC,SAAS,GAAG7B,KAAK,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,KAAK,CAAC8C,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;MAErF,IAAIf,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB7B,KAAK,CAAC6B,SAAS,CAAC,CAAClB,MAAM,GAAG,MAAM;QAChCX,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,GAAGsC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEnD,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;QAC3EZ,KAAK,CAAC6B,SAAS,CAAC,CAACgB,gBAAgB,GAAG,IAAI;QACxC7C,KAAK,CAAC6B,SAAS,CAAC,CAACiB,cAAc,GAAG,IAAI;QACtCxD,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;MACtD;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMgC,iBAAiB,GAAGA,CAACtD,KAAK,EAAEuD,MAAM,GAAG,EAAE,KAAK;IAChD,IAAI;MACF,MAAMrD,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;MAC/D,MAAMsC,SAAS,GAAG7B,KAAK,CAAC8B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,KAAK,CAAC8C,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;MAErF,IAAIf,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB7B,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,GAAGsC,IAAI,CAACI,GAAG,CAAC,GAAG,EAAE,CAACtD,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,IAAI,CAAC,IAAIyC,MAAM,CAAC;;QAEtF;QACA,IAAIrD,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS,IAAI,EAAE,IAAIZ,KAAK,CAAC6B,SAAS,CAAC,CAAClB,MAAM,KAAK,KAAK,EAAE;UACzEX,KAAK,CAAC6B,SAAS,CAAC,CAAClB,MAAM,GAAG,KAAK;;UAE/B;UACA,MAAMgC,eAAe,GAAG,CAAC,GAAGzD,QAAQ,EAAEY,KAAK,CAAC8C,WAAW,CAAC,CAAC,CAAC;UAC1DzD,WAAW,CAACwD,eAAe,CAAC;UAC5BrD,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAAC+C,eAAe,CAAC,CAAC;QACnE;QAEArD,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACI,KAAK,CAAC,CAAC;;QAEpD;QACA,IAAIhB,IAAI,IAAIA,IAAI,CAACc,KAAK,CAAC8C,WAAW,CAAC,CAAC,KAAK9C,KAAK,CAAC8C,WAAW,CAAC,CAAC,EAAE;UAC5D,MAAMZ,WAAW,GAAG;YAClB,GAAGhD,IAAI;YACP4B,SAAS,EAAEZ,KAAK,CAAC6B,SAAS,CAAC,CAACjB,SAAS;YACrCD,MAAM,EAAEX,KAAK,CAAC6B,SAAS,CAAC,CAAClB;UAC3B,CAAC;UACD1B,OAAO,CAAC+C,WAAW,CAAC;UACpB1C,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,SAAS,CAACoC,WAAW,CAAC,CAAC;;UAEhE;UACA,IAAIhC,KAAK,CAAC6B,SAAS,CAAC,CAAClB,MAAM,KAAK,KAAK,EAAE;YACrCc,MAAM,CAAC,CAAC;UACV;QACF;MACF;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,KAAK;IACd;EACF,CAAC;EAED,oBACE1C,OAAA,CAACC,WAAW,CAAC4E,QAAQ;IAACC,KAAK,EAAE;MAC3BxE,IAAI;MACJsC,KAAK;MACLzB,MAAM;MACN4B,MAAM;MACNE,aAAa;MACbM,kBAAkB;MAClBM,mBAAmB;MACnBE,aAAa;MACbM,cAAc;MACdK,iBAAiB;MACjBlE;IACF,CAAE;IAAAJ,QAAA,EACCA;EAAQ;IAAA2E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA7E,EAAA,CA1TaF,YAAY;EAAA,QAGNL,WAAW;AAAA;AAAAqF,EAAA,GAHjBhF,YAAY;AA2TzB,OAAO,MAAMiF,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO1F,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAACoF,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}