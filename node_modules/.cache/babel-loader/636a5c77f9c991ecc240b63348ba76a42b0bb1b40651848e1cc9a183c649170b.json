{"ast":null,"code":"var _jsxFileName = \"/Users/edzhisk/Desktop/Rocket Credits/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// List of known bad users (in a real app, this would come from a database)\nconst BAD_USERS = ['baduser@example.com', 'scammer@example.com', 'fraud@example.com'];\n\n// Auth Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Stores logged-in user\n  const [badUsers, setBadUsers] = useState(BAD_USERS); // List of bad users\n\n  // Check for existing session on component mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n\n    // Load bad users list from localStorage or use default\n    const storedBadUsers = localStorage.getItem('badUsers');\n    if (storedBadUsers) {\n      setBadUsers(JSON.parse(storedBadUsers));\n    } else {\n      localStorage.setItem('badUsers', JSON.stringify(BAD_USERS));\n    }\n  }, []);\n\n  // Signup Function\n  const signup = (email, password) => {\n    try {\n      // Check if email is in bad users list\n      if (badUsers.includes(email.toLowerCase())) {\n        return {\n          success: false,\n          message: \"This email is not allowed to register.\"\n        };\n      }\n\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n      // Check if user already exists\n      if (users.some(user => user.email === email)) {\n        return {\n          success: false,\n          message: \"User already exists.\"\n        };\n      }\n\n      // Create new user with initial data\n      const newUser = {\n        email,\n        password: btoa(password),\n        // Basic encoding (in production, use proper hashing)\n        createdAt: new Date().toISOString(),\n        subscription: null,\n        paymentHistory: [],\n        status: 'good',\n        // Default status is good\n        riskScore: 0,\n        // Risk score starts at 0\n        profile: {\n          name: '',\n          phone: '',\n          address: ''\n        }\n      };\n\n      // Add new user to users array\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Set current user\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = newUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        message: \"An error occurred during signup.\"\n      };\n    }\n  };\n\n  // Login Function\n  const login = (email, password) => {\n    try {\n      // Get users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n      // Find user\n      const userData = users.find(user => user.email === email);\n      if (!userData) return {\n        success: false,\n        message: \"User not found.\"\n      };\n\n      // Check password (in production, use proper password comparison)\n      if (userData.password !== btoa(password)) return {\n        success: false,\n        message: \"Invalid password.\"\n      };\n\n      // Remove sensitive data before storing in state\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = userData;\n\n      // Set current user\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: \"An error occurred during login.\"\n      };\n    }\n  };\n\n  // Logout Function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('currentUser');\n    window.location.href = \"/login\";\n  };\n\n  // Update User Profile\n  const updateProfile = profileData => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      if (userIndex === -1) return false;\n\n      // Update user profile\n      users[userIndex].profile = {\n        ...users[userIndex].profile,\n        ...profileData\n      };\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Update current user state\n      const updatedUser = {\n        ...user,\n        profile: users[userIndex].profile\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Update Subscription\n  const updateSubscription = subscriptionData => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      if (userIndex === -1) return false;\n\n      // Update user subscription\n      users[userIndex].subscription = subscriptionData;\n\n      // Add to payment history\n      users[userIndex].paymentHistory.push({\n        date: new Date().toISOString(),\n        type: subscriptionData.type,\n        amount: subscriptionData.price,\n        status: 'completed'\n      });\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // Update current user state\n      const updatedUser = {\n        ...user,\n        subscription: subscriptionData,\n        paymentHistory: users[userIndex].paymentHistory\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return true;\n    } catch (error) {\n      console.error('Subscription update error:', error);\n      return false;\n    }\n  };\n\n  // Check if user can use Rocket Credits\n  const canUseRocketCredits = email => {\n    // Get users array\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n\n    // Find user\n    const userData = users.find(user => user.email === email);\n    if (!userData) return {\n      allowed: false,\n      message: \"User not found.\"\n    };\n\n    // Check user status\n    if (userData.status === 'bad') {\n      return {\n        allowed: false,\n        message: \"Your account has been flagged for suspicious payment activity. Rocket Credits are not available.\"\n      };\n    }\n\n    // Check risk score\n    if (userData.riskScore > 70) {\n      return {\n        allowed: false,\n        message: \"Due to your account's risk assessment, Rocket Credits are not available at this time.\"\n      };\n    }\n    return {\n      allowed: true\n    };\n  };\n\n  // Mark user as bad\n  const markUserAsBad = (email, reason = \"Suspicious activity\") => {\n    try {\n      // Update bad users list\n      const updatedBadUsers = [...badUsers, email.toLowerCase()];\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].status = 'bad';\n        users[userIndex].riskScore = 100;\n        users[userIndex].suspensionReason = reason;\n        users[userIndex].suspensionDate = new Date().toISOString();\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      // If the current user is being marked as bad, log them out\n      if (user && user.email.toLowerCase() === email.toLowerCase()) {\n        logout();\n      }\n      return true;\n    } catch (error) {\n      console.error('Error marking user as bad:', error);\n      return false;\n    }\n  };\n\n  // Mark user as good\n  const markUserAsGood = email => {\n    try {\n      // Remove from bad users list\n      const updatedBadUsers = badUsers.filter(e => e.toLowerCase() !== email.toLowerCase());\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].status = 'good';\n        users[userIndex].riskScore = Math.max(0, users[userIndex].riskScore - 50); // Reduce risk score\n        users[userIndex].suspensionReason = null;\n        users[userIndex].suspensionDate = null;\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n      return true;\n    } catch (error) {\n      console.error('Error marking user as good:', error);\n      return false;\n    }\n  };\n\n  // Increase user risk score\n  const increaseRiskScore = (email, points = 10) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      if (userIndex !== -1) {\n        users[userIndex].riskScore = Math.min(100, (users[userIndex].riskScore || 0) + points);\n\n        // If risk score exceeds threshold, mark as bad\n        if (users[userIndex].riskScore >= 80 && users[userIndex].status !== 'bad') {\n          users[userIndex].status = 'bad';\n\n          // Also add to bad users list\n          const updatedBadUsers = [...badUsers, email.toLowerCase()];\n          setBadUsers(updatedBadUsers);\n          localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n        }\n        localStorage.setItem('users', JSON.stringify(users));\n\n        // If the current user's risk score is being increased, update their state\n        if (user && user.email.toLowerCase() === email.toLowerCase()) {\n          const updatedUser = {\n            ...user,\n            riskScore: users[userIndex].riskScore,\n            status: users[userIndex].status\n          };\n          setUser(updatedUser);\n          localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n          // If user is now bad, log them out\n          if (users[userIndex].status === 'bad') {\n            logout();\n          }\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('Error increasing risk score:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      signup,\n      logout,\n      updateProfile,\n      updateSubscription,\n      canUseRocketCredits,\n      markUserAsBad,\n      markUserAsGood,\n      increaseRiskScore,\n      badUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom Hook to Use Auth Context\n_s(AuthProvider, \"TbBxnvDV0CorMswbuf3e3uaHXlk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","BAD_USERS","AuthProvider","children","_s","user","setUser","badUsers","setBadUsers","storedUser","localStorage","getItem","JSON","parse","storedBadUsers","setItem","stringify","signup","email","password","includes","toLowerCase","success","message","users","some","newUser","btoa","createdAt","Date","toISOString","subscription","paymentHistory","status","riskScore","profile","name","phone","address","push","_","userWithoutPassword","error","console","login","userData","find","logout","removeItem","window","location","href","updateProfile","profileData","userIndex","findIndex","u","updatedUser","updateSubscription","subscriptionData","date","type","amount","price","canUseRocketCredits","allowed","markUserAsBad","reason","updatedBadUsers","suspensionReason","suspensionDate","markUserAsGood","filter","e","Math","max","increaseRiskScore","points","min","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/edzhisk/Desktop/Rocket Credits/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create Auth Context\nconst AuthContext = createContext();\n\n// List of known bad users (in a real app, this would come from a database)\nconst BAD_USERS = [\n  'baduser@example.com',\n  'scammer@example.com',\n  'fraud@example.com'\n];\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // Stores logged-in user\n  const [badUsers, setBadUsers] = useState(BAD_USERS); // List of bad users\n\n  // Check for existing session on component mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n\n    // Load bad users list from localStorage or use default\n    const storedBadUsers = localStorage.getItem('badUsers');\n    if (storedBadUsers) {\n      setBadUsers(JSON.parse(storedBadUsers));\n    } else {\n      localStorage.setItem('badUsers', JSON.stringify(BAD_USERS));\n    }\n  }, []);\n\n  // Signup Function\n  const signup = (email, password) => {\n    try {\n      // Check if email is in bad users list\n      if (badUsers.includes(email.toLowerCase())) {\n        return { success: false, message: \"This email is not allowed to register.\" };\n      }\n\n      // Get existing users or initialize empty array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      \n      // Check if user already exists\n      if (users.some(user => user.email === email)) {\n        return { success: false, message: \"User already exists.\" };\n      }\n\n      // Create new user with initial data\n      const newUser = {\n        email,\n        password: btoa(password), // Basic encoding (in production, use proper hashing)\n        createdAt: new Date().toISOString(),\n        subscription: null,\n        paymentHistory: [],\n        status: 'good', // Default status is good\n        riskScore: 0, // Risk score starts at 0\n        profile: {\n          name: '',\n          phone: '',\n          address: ''\n        }\n      };\n\n      // Add new user to users array\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Set current user\n      const { password: _, ...userWithoutPassword } = newUser;\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, message: \"An error occurred during signup.\" };\n    }\n  };\n\n  // Login Function\n  const login = (email, password) => {\n    try {\n      // Get users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      \n      // Find user\n      const userData = users.find(user => user.email === email);\n      if (!userData) return { success: false, message: \"User not found.\" };\n\n      // Check password (in production, use proper password comparison)\n      if (userData.password !== btoa(password)) return { success: false, message: \"Invalid password.\" };\n\n      // Remove sensitive data before storing in state\n      const { password: _, ...userWithoutPassword } = userData;\n      \n      // Set current user\n      setUser(userWithoutPassword);\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, message: \"An error occurred during login.\" };\n    }\n  };\n\n  // Logout Function\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('currentUser');\n    window.location.href = \"/login\";\n  };\n\n  // Update User Profile\n  const updateProfile = (profileData) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex === -1) return false;\n\n      // Update user profile\n      users[userIndex].profile = {\n        ...users[userIndex].profile,\n        ...profileData\n      };\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Update current user state\n      const updatedUser = {\n        ...user,\n        profile: users[userIndex].profile\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      \n      return true;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    }\n  };\n\n  // Update Subscription\n  const updateSubscription = (subscriptionData) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email === user.email);\n      \n      if (userIndex === -1) return false;\n\n      // Update user subscription\n      users[userIndex].subscription = subscriptionData;\n\n      // Add to payment history\n      users[userIndex].paymentHistory.push({\n        date: new Date().toISOString(),\n        type: subscriptionData.type,\n        amount: subscriptionData.price,\n        status: 'completed'\n      });\n\n      // Update localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n      \n      // Update current user state\n      const updatedUser = {\n        ...user,\n        subscription: subscriptionData,\n        paymentHistory: users[userIndex].paymentHistory\n      };\n      setUser(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      \n      return true;\n    } catch (error) {\n      console.error('Subscription update error:', error);\n      return false;\n    }\n  };\n\n  // Check if user can use Rocket Credits\n  const canUseRocketCredits = (email) => {\n\n    // Get users array\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    \n    // Find user\n    const userData = users.find(user => user.email === email);\n    if (!userData) return { allowed: false, message: \"User not found.\" };\n\n    // Check user status\n    if (userData.status === 'bad') {\n      return { allowed: false, message: \"Your account has been flagged for suspicious payment activity. Rocket Credits are not available.\" };\n    }\n\n    // Check risk score\n    if (userData.riskScore > 70) {\n      return { allowed: false, message: \"Due to your account's risk assessment, Rocket Credits are not available at this time.\" };\n    }\n\n    return { allowed: true };\n  };\n\n  // Mark user as bad\n  const markUserAsBad = (email, reason = \"Suspicious activity\") => {\n    try {\n      // Update bad users list\n      const updatedBadUsers = [...badUsers, email.toLowerCase()];\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].status = 'bad';\n        users[userIndex].riskScore = 100;\n        users[userIndex].suspensionReason = reason;\n        users[userIndex].suspensionDate = new Date().toISOString();\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      // If the current user is being marked as bad, log them out\n      if (user && user.email.toLowerCase() === email.toLowerCase()) {\n        logout();\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error marking user as bad:', error);\n      return false;\n    }\n  };\n\n  // Mark user as good\n  const markUserAsGood = (email) => {\n    try {\n      // Remove from bad users list\n      const updatedBadUsers = badUsers.filter(e => e.toLowerCase() !== email.toLowerCase());\n      setBadUsers(updatedBadUsers);\n      localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n\n      // Update user status in users array\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].status = 'good';\n        users[userIndex].riskScore = Math.max(0, users[userIndex].riskScore - 50); // Reduce risk score\n        users[userIndex].suspensionReason = null;\n        users[userIndex].suspensionDate = null;\n        localStorage.setItem('users', JSON.stringify(users));\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error marking user as good:', error);\n      return false;\n    }\n  };\n\n  // Increase user risk score\n  const increaseRiskScore = (email, points = 10) => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userIndex = users.findIndex(u => u.email.toLowerCase() === email.toLowerCase());\n      \n      if (userIndex !== -1) {\n        users[userIndex].riskScore = Math.min(100, (users[userIndex].riskScore || 0) + points);\n        \n        // If risk score exceeds threshold, mark as bad\n        if (users[userIndex].riskScore >= 80 && users[userIndex].status !== 'bad') {\n          users[userIndex].status = 'bad';\n          \n          // Also add to bad users list\n          const updatedBadUsers = [...badUsers, email.toLowerCase()];\n          setBadUsers(updatedBadUsers);\n          localStorage.setItem('badUsers', JSON.stringify(updatedBadUsers));\n        }\n        \n        localStorage.setItem('users', JSON.stringify(users));\n        \n        // If the current user's risk score is being increased, update their state\n        if (user && user.email.toLowerCase() === email.toLowerCase()) {\n          const updatedUser = {\n            ...user,\n            riskScore: users[userIndex].riskScore,\n            status: users[userIndex].status\n          };\n          setUser(updatedUser);\n          localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n          \n          // If user is now bad, log them out\n          if (users[userIndex].status === 'bad') {\n            logout();\n          }\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error increasing risk score:', error);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      login, \n      signup, \n      logout,\n      updateProfile,\n      updateSubscription,\n      canUseRocketCredits,\n      markUserAsBad,\n      markUserAsGood,\n      increaseRiskScore,\n      badUsers\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom Hook to Use Auth Context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}